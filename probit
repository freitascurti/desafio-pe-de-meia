install.packages("plm")
install.packages("glmnet")


# Carregando pacotes necessários
library(PNADcIBGE)
library(survey)
library(convey)
library(tidyverse)
library(gt)
library(scales)
library(dplyr)
library(haven)

rm(list=ls(all=TRUE))
gc()

## Construindo a base de dados

publico_alvo_painel <- readRDS("publico_alvo_painel.rds")

# Filtrando as variáveis necessárias

variaveis_interesse <- c(
  "UPA", "V1008", "V1014", "V2003", "V2008", "V20081", "V20082", "V2009",
  "V3003A", "VD2004", "V3002A", "ID_DOMICILIO", "V2001", "VD4016",
  "VD4017", "Trimestre", "VD2003", "VD4019", "V2007", "V3009A","VD2002", "V3006","VD3005")


# Filtrar a base de dados
publico_alvo_filtrado <- publico_alvo_painel %>%
  select(all_of(variaveis_interesse))

## Criando as dummies necessárias

# Parte 1: Calcular a Renda Domiciliar Per Capita (RDPC)
rdpc_data <- publico_alvo_filtrado %>%
  group_by(ID_DOMICILIO) %>%
  summarise(
    V2001R = sum(VD2003, na.rm = TRUE),        # Número de componentes do domicílio
    VD4016R = sum(VD4016, na.rm = TRUE),       # Total do rendimento habitual no domicílio
    VD4017R = sum(VD4017, na.rm = TRUE),       # Total do rendimento efetivo no domicílio
    VD4047R = sum(VD4019, na.rm = TRUE)        # Rendimento mensal habitual de todos os trabalhos
  ) %>%
  mutate(
    RD = VD4016R + VD4017R + VD4047R,          # Rendimento domiciliar total
    RDPC = RD / V2001R                         # Renda domiciliar per capita
  ) %>%
  ungroup()


# Parte 2: Combinar RDPC com o DataFrame original
publico_alvo_filtrado <- publico_alvo_filtrado %>%
  left_join(rdpc_data, by = "ID_DOMICILIO")

# Parte 3: Adicionar as Dummies
publico_alvo_filtrado <- publico_alvo_filtrado %>%
  mutate(
    id_individuo = paste0(UPA, "_", V1008, "_", V1014, "_", V2003, "_", V2008, "_", V20081, "_", V20082),
    faixa_idade_14_24 = ifelse(V2009 >= 14 & V2009 <= 24, 1, 0),
    ensino_medio_dummie = ifelse(V3003A == "Regular do ensino médio", 1, 0),  # Regular do ensino médio
    residencia_unipessoal = ifelse(VD2004 == "Unipessoal", 1, 0),             # Unidade doméstica unipessoal
    rede_publica = ifelse(V3002A == "Rede pública", 1, 0),                    # Rede pública
    renda_per_capta_menor_706 = ifelse(RDPC < 706, 1, 0)                      # Renda domiciliar per capita menor que 706
  )


# Adicionando a coluna evasão com lógica simplificada

publico_alvo_filtrado <- publico_alvo_filtrado %>%
  group_by(id_individuo) %>%
  mutate(
    evasão = ifelse(
      # Condição 1: Se o indivíduo estava matriculado no 1º trimestre de 2023,
      # mas não aparece matriculado no 2º trimestre de 2023.
      (Trimestre == "2023_1" & V3003A == "Regular do ensino médio" & 
         !any(Trimestre == "2023_2" & V3003A == "Regular do ensino médio")) |
        
        # Condição 2: Se o indivíduo estava matriculado no 2º trimestre de 2023,
        # mas não aparece matriculado no 3º trimestre de 2023.
        (Trimestre == "2023_2" & V3003A == "Regular do ensino médio" & 
           !any(Trimestre == "2023_3" & V3003A == "Regular do ensino médio")) |
        
        # Condição 3: Se o indivíduo estava matriculado no 3º trimestre de 2023,
        # mas não aparece matriculado no 4º trimestre de 2023.
        (Trimestre == "2023_3" & V3003A == "Regular do ensino médio" & 
           !any(Trimestre == "2023_4" & V3003A == "Regular do ensino médio")) |
        1,  # Se alguma das condições acima for verdadeira, marcamos evasão como 1.
      0   # Caso contrário, marcamos evasão como 0.
    )
  ) %>%
  ungroup()
        
# Filtrando o painel para manter apenas indivíduos que aparecem nos quatro trimestres
publico_alvo_filtrado<- publico_alvo_filtrado %>%
  group_by(id_individuo) %>%
  filter(n_distinct(Trimestre) == 4) %>%  # Garante que o indivíduo está presente nos quatro trimestres
  ungroup()

# Removendo observações onde V20082 é igual a 9999
publico_alvo_painel_completo <- publico_alvo_filtrado %>%
  filter(V20082 != 9999)

# Adicionando a coluna de região
publico_alvo_painel_completo <- publico_alvo_painel_completo %>%
  mutate(
    região = case_when(
      substr(UPA, start = 1, stop = 1) == '1' ~ 'Norte',
      substr(UPA, start = 1, stop = 1) == '2' ~ 'Nordeste',
      substr(UPA, start = 1, stop = 1) == '3' ~ 'Sudeste',
      substr(UPA, start = 1, stop = 1) == '4' ~ 'Sul',
      substr(UPA, start = 1, stop = 1) == '5' ~ 'Centro-Oeste',
      TRUE ~ NA_character_  # Para casos onde o código não corresponde a uma região
    )
  )

# Adicionando as colunas de educacao_mae e educacao_pai
publico_alvo_painel_completo <- publico_alvo_painel_completo %>%
  group_by(ID_DOMICILIO) %>%
  mutate(
    # Identificar a mãe
    is_mae = (as.numeric(V2007) == 2 & (as.numeric(VD2002) %in% c(1, 2, 6))),
    educacao_mae = ifelse(any(is_mae), VD3005[is_mae][1], NA),
    
    # Identificar o pai
    is_pai = (as.numeric(V2007) == 1 & (as.numeric(VD2002) %in% c(1, 2, 6))),
    educacao_pai = ifelse(any(is_pai), VD3005[is_pai][1], NA)
  ) %>%
  # Remover as colunas auxiliares e desagrupar
  select(-is_mae, -is_pai) %>%
  ungroup()

# Reorganizando as colunas para trazer as novas variáveis para o começo
publico_alvo_painel_completo <- publico_alvo_painel_completo %>%
  dplyr::select(
    id_individuo, faixa_idade_14_24, ensino_medio_dummie, residencia_unipessoal, 
    rede_publica, evasão, renda_per_capta_menor_706, RDPC, região, educacao_mae, educacao_pai, 
    everything()
  )

# Filtrando para beneficiar os indivíduos de interesse
beneficiários_pdm <- subset(publico_alvo_painel_completo,
                            (V2009 >= 14 & V2009 <= 24) &                # Faixa etária de 14 a 24 anos
                              V3002A == "Rede pública" &                   # Escola pública
                              V3003A == "Regular do ensino médio" &        # Ensino médio regular
                              RDPC < 706 &                                 # Renda per capita menor que 706 reais
                              VD2004 != "Unipessoal"                       # Não é residência unipessoal
)

## Tamanho do problema


# Filtrar o público potencial (14-24 anos, RDPC < 706, VD2004 != "Unipessoal")

publico_pontencial <- publico_alvo_painel_completo %>%
  filter(  V2009 >= 14 & V2009 <= 24 &       # Faixa etária de 14 a 24 anos
             RDPC < 706 &                      # Renda per capita menor que 706 reais
             VD2004 != "Unipessoal" )         # Não ser residência unipessoal)

# Filtrar publico EM público

em_publico <- publico_alvo_painel_completo %>%
  filter(
    V3002A == "Rede pública" &             # Somente escolas da rede pública
      V2009 >= 14 & V2009 <= 24              # Faixa etária de 14 a 24 anos
  )


# Calcular a evasão por série, público potencial

evasao_publico_potencial <- publico_pontencial %>%
  group_by(V3006) %>%  # Agrupar por série
  summarise(
    evasao_total = sum(evasão, na.rm = TRUE),  # Soma das evasões
    total_alunos = n(),                        # Total de alunos
    taxa_evasao = evasao_total / total_alunos  # Taxa de evasão
  )

# Calcular a evasão por série, EM público

evasao_em_publico <- em_publico %>%
  group_by(V3006) %>%                      # Agrupar por série
  summarise(
    evasao_total = sum(evasão, na.rm = TRUE),  # Soma das evasões
    total_alunos = n(),                        # Total de alunos
    taxa_evasao = evasao_total / total_alunos  # Taxa de evasão
  )


# Calcular a evasão por série, beneficiários PDM

evasao_publico_alvo <- beneficiários_pdm %>%
  group_by(V3006) %>%  # Agrupar por série
  summarise(
    evasao_total = sum(evasão, na.rm = TRUE),  # Soma das evasões
    total_alunos = n(),                        # Total de alunos
    taxa_evasao = evasao_total / total_alunos  # Taxa de evasão
  )


## Motivos da evasão

# Logit em painel, público geral


# Logit em painel, efeitos fixos, público geral


# Logit em painel, público alvo


# Logit em painel, efeitos fixos, público geral



########## Variáveis de interesse ###########################################################################


# região

# educacao_mae , educacao_pai 

#V1022: Situação do domicílio

#V2001: Número de pessoas no domicílio

#V2007: Sexo

#V2009: Idade do morador na data de referência

#2010: Cor ou raça

#VD2004: Espécie da unidade doméstica

#VD3004: Nível de instrução mais elevado alcançado

# RDPC : Rendimento domiciliar per capta

# V3001: Sabe ler e escrever?



################################### Número evasão###########################################################

# Verificar evasões em todas as transições de trimestre
evasoes_todos_periodos <- publico_alvo_painel_completo %>%
  group_by(id_individuo) %>%
  summarise(
    # Verificar matrícula no 1º trimestre e ausência no 2º trimestre
    evasao_1_para_2 = any(Trimestre == "2023_1" & V3003A == "Regular do ensino médio") & 
      !any(Trimestre == "2023_2" & V3003A == "Regular do ensino médio"),
    
    # Verificar matrícula no 2º trimestre e ausência no 3º trimestre
    evasao_2_para_3 = any(Trimestre == "2023_2" & V3003A == "Regular do ensino médio") & 
      !any(Trimestre == "2023_3" & V3003A == "Regular do ensino médio"),
    
    # Verificar matrícula no 3º trimestre e ausência no 4º trimestre
    evasao_3_para_4 = any(Trimestre == "2023_3" & V3003A == "Regular do ensino médio") & 
      !any(Trimestre == "2023_4" & V3003A == "Regular do ensino médio")
  ) %>%
  # Filtrar indivíduos que tiveram evasão em qualquer um dos períodos
  filter(evasao_1_para_2 | evasao_2_para_3 | evasao_3_para_4) %>%
  ungroup()

# Verificar o número total de indivíduos que tiveram evasão em qualquer período
numero_total_de_evasoes <- nrow(evasoes_todos_periodos)
print(numero_total_de_evasoes)



